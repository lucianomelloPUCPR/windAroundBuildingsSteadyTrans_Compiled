OpenFOAM Wind Around Buildings Co-simulation
============================================

A compiled OpenFOAM case for simulating wind flow around buildings with automatic configuration validation and co-simulation capabilities.

QUICK START
===========

1. Run the Complete Simulation
   ./Allrun

   This will automatically:
   - Validate your configuration
   - Generate the mesh
   - Set up boundary conditions
   - Prepare for co-simulation

2. Clean the Case
   ./Allclean

CONFIGURATION
=============

Configuration Files:
- simu.json - Main configuration file (EDIT THIS)
- simu_explained.json - Detailed parameter explanations (reference only)

Basic Configuration Workflow:

1. Edit the configuration:
   nano simu.json
   or
   vim simu.json

2. Run the initial setup (the case not run, only builds the mesh):
   ./Allrun

3. Run the simulation
   ./run

Key Configuration Parameters (edit in simu.json):

Parameter       | Description                      | Example Value
-------------   |----------------------------------|---------------
guideline       | Boundary condition style         | "AIJ", "1-Side", "AllSides"
cells           | Mesh resolution (thousands)      | 50
velo            | Wind velocity [Ux, Uy, Uz] m/s   | [3, 2, 1.5]
useProfiles     | Use wind profiles (true/false)   | true
site_name       | Terrain type                     | "urban", "suburban", "flat_fields"
turbulenceModel | **Turbulence model choice        | "omega" or "epsilon" |
cores           | Number of CPU cores              | 12
endTime         | Simulation end time (seconds)    | 100
deltat          | Time step size (seconds)         | 1.0

Example simu.json snippet:
{
    "guideline": "AIJ",
    "cells": 50,
    "velo": [3, 2, 1.5],
    "useProfiles": true,
    "site_name": "urban",
    "turbulenceModel": "epsilon",
    "cores": 12,
    "endTime": 100
}

> 💡 The new parameter `turbulenceModel` lets you choose between **k-ω SST** and **k-ε** turbulence models.  
> When `"omega"` is selected, the solver uses `kOmegaSST` and generates `0/omega`.  
> When `"epsilon"` is selected, the solver uses `kEpsilon` and generates `0/epsilon`.  
> This choice also automatically updates `constant/momentumTransport` and `system/fvSchemes` for consistency.

ADVANCED USAGE
==============

Manual Script Execution:

Generate specific OpenFOAM dictionaries:
./of_cosim controlDict
./of_cosim blockMesh
./of_cosim snappyHexMesh

Update boundary conditions:
./of_cosim U
./of_cosim T
./of_cosim k

Run complete setup:
./of_cosim setup

Update boundary conditions for co-simulation:
./of_cosim bc

Co-simulation Workflow (for external coupling):

1. Initial setup (run once):
   ./of_cosim setup

2. Update boundary conditions (run repeatedly):
   ./of_cosim bc

Validation and Debugging:

Validate configuration only:
./of_cosim validate_config

CASE STRUCTURE
==============

windAroundBuildingsSteadyState_Trans_Models/
├── README                      # General explanation
├── of_cosim                    # Compiled co-simulation executable
├── simu.json                   # User configuration
├── simu_explained.json         # Parameter documentation
├── Allrun                      # Main run script
├── run                         # Run script repeatedly
├── Allclean                    # Clean script
├── system/                     # OpenFOAM system directory
│   ├── controlDict             # Generated by of_cosim
│   ├── blockMeshDict           # Generated by of_cosim
│   └── snappyHexMeshDict       # Generated by of_cosim
|   ├── functions               # Generated by of_cosim
│   └── fvSchemes               # Generated by of_cosim
├── constant/                   # OpenFOAM constant directory
│   └── triSurface/             # STL geometry files
|   └── momentumTransport       # Generated by of_cosim
└── 0/                          # OpenFOAM initial conditions
    ├── U                       # Generated by of_cosim
    ├── T                       # Generated by of_cosim
    └── ...                     # Other field files

TROUBLESHOOTING
===============

Common Issues:

1. Configuration errors:
   "❌ Configuration validation failed!"
   - Check simu.json for syntax errors
   - Refer to simu_explained.json for parameter explanations

2. Missing STL files:
   "⚠️ STL directory not found"
   - Ensure constant/triSurface/ directory exists with your building geometry

3. Mesh generation fails:
   - Check available disk space
   - Verify STL files are valid
   - Reduce cells parameter in simu.json

Log Files (check for detailed errors):
- log.blockMesh - Block mesh generation log
- log.snappyHexMesh - SnappyHexMesh log
- log.decomposePar - Parallel decomposition log

THERMAL SIMULATION
==================

Thermal parameters in simu.json:
- T - Ambient temperature (Kelvin)
- Tw - Wall temperature (Kelvin)
- Tf - Floor temperature (Kelvin)
- rejectedHeat - Heat rejection from AC systems (W/m²)

WIND PROFILE OPTIONS
====================

Velocity Profiles:
- Power law: Umag(z) = Uref * ((z-d)/(zref-d))^alpha
- Logarithmic law: Umag(z) = (u*/kappa) * ln((z-d)/z0)

Terrain Types (site_name parameter):
- open_water - Very smooth (z0 ≈ 0.0002m)
- flat_fields - Agricultural (z0 ≈ 0.03m)
- suburban - Low-density buildings (z0 ≈ 0.3m)
- urban - Medium-density city (z0 ≈ 1.0m)
- dense_urban - High-density city (z0 ≈ 2.0m)

## RECOMMENDED WORKFLOW
1. Start with cells = 30 for quick tests
2. Use "useProfiles": false for first runs
3. Gradually enable complexity
4. Switch turbulence model via "turbulenceModel": "epsilon" or "omega"


SUPPORT
=======

Getting Help:

1. Check configuration: Use ./of_cosim validate_config
2. Refer to documentation: See simu_explained.json
3. Check OpenFOAM logs: Look in case directory for log.* files

Recommended Workflow:

1. Start with small cells value (e.g., 30) for testing
2. Use "useProfiles": false for simpler initial simulations
3. Gradually increase complexity as the case runs successfully

IMPORTANT NOTES
===============

- STL files in constant/triSurface/ should be in meters
- Ensure sufficient disk space for mesh generation
- Use appropriate cores value for your hardware
- Configuration is automatically validated before each run
- Supports both k-ω SST and k-ε turbulence models through turbulenceModel parameter
- Automatically updates momentumTransport and fvSchemes for consistency

COMMAND SUMMARY
===============

Basic commands:
./Allrun                    # Run complete simulation
./Allclean                  # Clean case
./of_cosim setup           # Generate mesh and setup
./of_cosim bc              # Update boundary conditions
./of_cosim validate_config # Validate configuration

Individual field generation:
./of_cosim U               # Generate velocity field
./of_cosim T               # Generate temperature field
./of_cosim k               # Generate turbulence field
./of_cosim p               # Generate pressure field

Mesh generation:
./of_cosim blockMesh       # Generate blockMeshDict
./of_cosim snappyHexMesh   # Generate snappyHexMeshDict
./of_cosim controlDict     # Generate controlDict


## CHANGE LOG

| Version | Date | Description |
|----------|------|-------------|
| v1.2 | Oct 2025 | ➕ Added turbulenceModel option (omega/epsilon) with automatic updates to momentumTransport and fvSchemes |
| v1.1 | Aug 2025 | Improved mesh generation and stability checks |
| v1.0 | Jul 2025 | Initial compiled release with ABL-ready BCs and configuration validation |